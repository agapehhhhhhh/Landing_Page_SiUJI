# Landing_Page_SiUJI/docker-compose.yml

version: '3.8'

services:
  # Layanan Database PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: siuji-postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Layanan Backend PayloadCMS
  backend:
    container_name: siuji-backend-cms
    build:
      context: ./landingpage-cms
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PAYLOAD_SECRET: ${PAYLOAD_SECRET}
      PAYLOAD_PUBLIC_SERVER_URL: ${PAYLOAD_PUBLIC_SERVER_URL:-http://localhost:3000}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:8080}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
    depends_on:
      db:
        condition: service_healthy

  # Layanan Frontend Vue.js
  frontend:
    container_name: siuji-frontend-vue
    build:
      context: ./landingpage-frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:80" # Akses frontend melalui http://localhost:8080
    depends_on:
      - backend

volumes:
  pgdata: